// Generated by gencpp from file control/EncoderData.msg
// DO NOT EDIT!


#ifndef CONTROL_MESSAGE_ENCODERDATA_H
#define CONTROL_MESSAGE_ENCODERDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace control
{
template <class ContainerAllocator>
struct EncoderData_
{
  typedef EncoderData_<ContainerAllocator> Type;

  EncoderData_()
    : en_ext1(0.0)
    , en_ext2(0.0)
    , en_ext3(0.0)
    , en_in1(0.0)
    , en_in2(0.0)
    , en_in3(0.0)
    , en_in4(0.0)  {
    }
  EncoderData_(const ContainerAllocator& _alloc)
    : en_ext1(0.0)
    , en_ext2(0.0)
    , en_ext3(0.0)
    , en_in1(0.0)
    , en_in2(0.0)
    , en_in3(0.0)
    , en_in4(0.0)  {
  (void)_alloc;
    }



   typedef float _en_ext1_type;
  _en_ext1_type en_ext1;

   typedef float _en_ext2_type;
  _en_ext2_type en_ext2;

   typedef float _en_ext3_type;
  _en_ext3_type en_ext3;

   typedef float _en_in1_type;
  _en_in1_type en_in1;

   typedef float _en_in2_type;
  _en_in2_type en_in2;

   typedef float _en_in3_type;
  _en_in3_type en_in3;

   typedef float _en_in4_type;
  _en_in4_type en_in4;





  typedef boost::shared_ptr< ::control::EncoderData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::control::EncoderData_<ContainerAllocator> const> ConstPtr;

}; // struct EncoderData_

typedef ::control::EncoderData_<std::allocator<void> > EncoderData;

typedef boost::shared_ptr< ::control::EncoderData > EncoderDataPtr;
typedef boost::shared_ptr< ::control::EncoderData const> EncoderDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::control::EncoderData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::control::EncoderData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::control::EncoderData_<ContainerAllocator1> & lhs, const ::control::EncoderData_<ContainerAllocator2> & rhs)
{
  return lhs.en_ext1 == rhs.en_ext1 &&
    lhs.en_ext2 == rhs.en_ext2 &&
    lhs.en_ext3 == rhs.en_ext3 &&
    lhs.en_in1 == rhs.en_in1 &&
    lhs.en_in2 == rhs.en_in2 &&
    lhs.en_in3 == rhs.en_in3 &&
    lhs.en_in4 == rhs.en_in4;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::control::EncoderData_<ContainerAllocator1> & lhs, const ::control::EncoderData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::control::EncoderData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::control::EncoderData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::control::EncoderData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::control::EncoderData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control::EncoderData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control::EncoderData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::control::EncoderData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "23ea1aec3b3aed5da94835b8bde1468c";
  }

  static const char* value(const ::control::EncoderData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x23ea1aec3b3aed5dULL;
  static const uint64_t static_value2 = 0xa94835b8bde1468cULL;
};

template<class ContainerAllocator>
struct DataType< ::control::EncoderData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "control/EncoderData";
  }

  static const char* value(const ::control::EncoderData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::control::EncoderData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 en_ext1\n"
"float32 en_ext2\n"
"float32 en_ext3\n"
"float32 en_in1\n"
"float32 en_in2\n"
"float32 en_in3\n"
"float32 en_in4\n"
;
  }

  static const char* value(const ::control::EncoderData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::control::EncoderData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.en_ext1);
      stream.next(m.en_ext2);
      stream.next(m.en_ext3);
      stream.next(m.en_in1);
      stream.next(m.en_in2);
      stream.next(m.en_in3);
      stream.next(m.en_in4);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EncoderData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::control::EncoderData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::control::EncoderData_<ContainerAllocator>& v)
  {
    s << indent << "en_ext1: ";
    Printer<float>::stream(s, indent + "  ", v.en_ext1);
    s << indent << "en_ext2: ";
    Printer<float>::stream(s, indent + "  ", v.en_ext2);
    s << indent << "en_ext3: ";
    Printer<float>::stream(s, indent + "  ", v.en_ext3);
    s << indent << "en_in1: ";
    Printer<float>::stream(s, indent + "  ", v.en_in1);
    s << indent << "en_in2: ";
    Printer<float>::stream(s, indent + "  ", v.en_in2);
    s << indent << "en_in3: ";
    Printer<float>::stream(s, indent + "  ", v.en_in3);
    s << indent << "en_in4: ";
    Printer<float>::stream(s, indent + "  ", v.en_in4);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTROL_MESSAGE_ENCODERDATA_H
